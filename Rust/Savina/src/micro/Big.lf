/**
 * A benchmark that implements a many-to-many message passing scenario. Several workers are created,
 * each of which sends a ping message to one other worker. To which worker the ping message is sent
 * is decided randomly. The worker who receives the ping message replies with a pong. Uppon
 * receiving the pong, the worker sends the next ping message.
 *
 * In LF, the challenging aspect about this benchmark is its sparse activity. While each worker is
 * connected to all other workers, it will only send a message to precisely one of them for each
 * tag. Since we need to ensure that input ports have a single writer, each worker has to create
 * multiport inputs, where each port instance corresponds to one potential source of ping or pong
 * messages. In order to determine from which worker we received a ping or pong message, we need to
 * iterate over all ports and check `if_present()`. However, this becomes very expensive for a large
 * number of workers. For 120 workers we send a total of 120 pings and 120 pongs per iteration, but
 * we need to check up to 14400 ping ports and 14400 pong ports in each iteration. Obviously this
 * introduces a large overhead.
 *
 * @author Hannes Klein
 * @author Felix Wittwer
 * @author Christian Menard
 * @author Johannes HayeÃŸ
 */
target Rust {
  build-type: Release,
  cargo-features: ["cli"],
  rust-include: "../lib/pseudo_random.rs"
}

import BenchmarkRunner from "../lib/BenchmarkRunner.lf"

// Despite the name, this only collects "finished" messages from all workers
// and lets the benchmark runner know when all the workers finished
reactor Sink(numWorkers: usize = 10) {
  state num_workers = numWorkers
  state num_messages: usize = 0  // number of exit messages received

  input start: unit
  output finished: unit

  input[numWorkers] workerFinished: unit

  reaction(start) {=
    // reset state
    self.num_messages = 0;
  =}

  reaction(workerFinished) -> finished {=
    // collect all exit messages
    for port in workerFinished {
        if let Some(_) = ctx.get(port) {
            self.num_messages += 1;
            if self.num_messages == self.num_workers {
                ctx.set(finished, ());
                return;
            }
        }
    }
  =}
}

reactor Worker(bank_index: usize = 0, numMessages: usize = 20000, numWorkers: usize = 10) {
  state bank_index = bank_index
  state num_messages = numMessages
  state num_workers = numWorkers

  preamble {=
    use crate::pseudo_random::PseudoRandomGenerator;
  =}

  state num_pings: usize = 0
  state random: PseudoRandomGenerator
  state exp_pong: usize = {= usize::MAX =}

  input[numWorkers] inPing: unit
  input[numWorkers] inPong: unit
  output[numWorkers] outPing: unit
  output[numWorkers] outPong: unit

  input start: unit
  output finished: unit

  logical action next

  // send ping
  reaction(next) -> outPing {=
    self.num_pings += 1;
    let next_val = unsafe { *self.random.next() };
    let to = (next_val as usize) % self.num_workers;
    self.exp_pong = to;
    ctx.set(&mut outPing[to], ());
  =}

  // reply with pong
  reaction(inPing) -> outPong {=
    for (i, _) in inPing.enumerate_set() {
        ctx.set(&mut outPong[i], ());
    }
  =}

  // receive pong and send next ping
  reaction(inPong) -> next, finished {=
    for (i, port) in inPong.enumerate_set() {
        if i != self.exp_pong {
            error!("Expected pong from {} but received pong from {}", self.exp_pong, i);
        }
    }

    // send next ping
    if self.num_pings == self.num_messages {
        ctx.set(finished, ());
    } else {
        ctx.schedule(next, Asap);
    }
  =}

  reaction(start) -> next {=
    // reset state
    self.num_pings = 0;
    self.exp_pong = usize::MAX;
    self.random = PseudoRandomGenerator::from(self.bank_index as i64);

    // start execution
    ctx.schedule(next, Asap);
  =}
}

main reactor(
    numIterations: usize = 12,
    numPingsPerReactor: usize = 20000,
    numReactors: usize = 120) {
  state num_iterations = numIterations
  state num_pings_per_reactor = numPingsPerReactor
  state num_reactors = numReactors

  runner = new BenchmarkRunner(num_iterations=numIterations)
  sink = new Sink(numWorkers=numReactors)
  worker = new[numReactors] Worker(numMessages=numPingsPerReactor, numWorkers=numReactors)

  (runner.start)+ -> sink.start, worker.start
  worker.finished -> sink.workerFinished
  sink.finished -> runner.finished

  worker.outPing -> interleaved(worker.inPing)
  worker.outPong -> interleaved(worker.inPong)

  preamble {=
    use crate::{print_args,reactors::benchmark_runner::{print_system_info, print_benchmark_info}};
  =}

  reaction(startup) {=
    print_benchmark_info("BigReactorLFRustBenchmark");
    print_args!(
        "numIterations",
        self.num_iterations,
        "numPingsPerReactor",
        self.num_pings_per_reactor,
        "numReactors",
        self.num_reactors
    );
    print_system_info();
  =}
}
