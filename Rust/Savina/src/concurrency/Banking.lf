/**
 * Copyright (C) 2020 TU Dresden
 *
 * This benchmark consists of a so-called 'Teller' and a number of Account reactors. The Accounts
 * keep an internal balance. The Teller generates a series of random credit messages which it sends
 * to the various accounts. Each credit message specifies an amount and a destination account. The
 * account that receives a credit message from the teller will reduce its balance by the given
 * amount and sends a debit message of the same amount to the destination account. The destination
 * account will then increase its balance accordingly.
 *
 * Note that the original Akka implementation performs an explicit synchronisation, to ensure that
 * the debit message has been processed by the destination account before replying to the teller
 * that the credit message was processed. This synchronization and reply mechanism is not required
 * in LF, as all messages are processed logically synchronous. The teller can be sure that any
 * credit messages it sends will be processed before moving to the next tag, and similarly each
 * account can be sure that any debit messages it sends will be processed by the receiving accounts
 * before receiving any new messages.
 *
 * The initial generation of all the credit messages is an interesting problem in LF. In the Akka
 * implementation, the teller actor will just send `numBankings` randomly generated messages to the
 * account actors, which then process one message after the other. However, this is not easily
 * doable in LF, as a port can only hold a single value. In order to send multiple messages to the
 * same account, the teller needs to use an action and advance in logical time before sending the
 * next message. This is currently implemented such that the Teller creates an initial queue per
 * account which contains all credit messages that should be sent to this account. Then it schedules
 * it `next` action and the corresponding reaction will send the first round of messages to the
 * accounts. Then it schedules next again. This continues until all messages are sent.
 *
 * A potential optimization to the problem described above, would be not to send individual credit
 * messages to the accounts, but instead a list of messages (for instance a std::vector). This could
 * be done in a single logical step and should thus be much faster. However, this is likely an
 * unfair advantage over the Akka implementation, which also sends all messages individually.
 *
 * @author Hannes Klein
 * @author Christian Menard
 * @author Johannes Haye√ü
 */
target Rust {
  build-type: Release,
  cargo-features: ["cli"],
  rust-include: "../lib/pseudo_random.rs"
}

import BenchmarkRunner from "../lib/BenchmarkRunner.lf"

reactor Teller(numAccounts: usize = 1000, numBankings: usize = 50000) {
  state num_accounts = numAccounts
  state num_bankings = numBankings

  preamble {=
    use std::collections::VecDeque;
    use crate::pseudo_random::{PseudoRandomGenerator, RandomValue};

    type MessageQueue = VecDeque<CreditMessage>;

    #[derive(Copy, Clone)]
    pub struct CreditMessage {
        pub recipient: usize,
        pub amount: f64,
    }
  =}

  state randomGen: PseudoRandomGenerator
  state messageQueues: Vec<MessageQueue> = {= vec![Default::default(); numAccounts] =}

  input start: unit
  output finished: unit

  output[numAccounts] reset_state: unit
  output[numAccounts] credit: CreditMessage

  logical action next

  reaction(start) -> reset_state, next {=
    info!("Teller: Start a new iteration");

    // reset local state
    self.randomGen.reseed(123456);

    // reset all accounts
    for r in reset_state {
        ctx.set(r, ());
    }

    for _ in 0..self.num_bankings {
        // src is lower than dest id to ensure there is never a deadlock
        // Note: this comment stems from the original Akka implementation and
        // is actually not needed in LF, since cycle free programs cannot deadlock
        let max_account = ((self.num_accounts / 10) * 8) as i64;
        let src_val = unsafe { *self.randomGen.next_in_range(0..max_account) };
        let src_account = src_val as usize;
        let dest_val = unsafe { *self.randomGen.next_in_range((src_account as i64 + 1)..self.num_accounts as i64) };
        let dest_account = dest_val as usize;

        let amount = self.randomGen.next().to_f64_invert() * 1000.0;

        info!("Send {} from {} to {}", amount, src_account, dest_account);
        self.messageQueues[src_account].push_back(
            CreditMessage{
                recipient: dest_account,
                amount
            }
        );
    }

    // start execution
    ctx.schedule(next, Asap);
  =}

  reaction(next) -> next, credit, finished {=
    info!("Teller: Sending a new round of credit messages");
    let mut work_found = false;
    for i in 0..self.num_accounts {
        if let Some(message) = self.messageQueues[i].pop_front() {
            work_found = true;
            ctx.set(&mut credit[i], message);
        }
    }

    if work_found {
        ctx.schedule(next, Asap);
    } else {
        info!("Teller: Finished iteration");
        ctx.set(finished, ());
    }
  =}
}

reactor Account(bank_index: usize = 0, numAccounts: usize = 1000, initialBalance: f64 = 0.0) {
  state bank_index = bank_index
  state num_accounts = numAccounts
  state initial_balance = initialBalance

  state balance: f64 = 0.0

  input reset_state: unit
  input inCredit: CreditMessage

  input[numAccounts] inDebit: f64
  output[numAccounts] outDebit: f64

  preamble {=
    use crate::reactors::teller::CreditMessage;
  =}

  reaction(reset_state) {=
    self.balance = self.initial_balance;
  =}

  reaction(inCredit) -> outDebit {=
    let message = ctx.get(inCredit).unwrap();
    // reduce the balance
    self.balance -= message.amount;
    // and sent the recipient a debit message
    ctx.set(&mut outDebit[message.recipient], message.amount);

    info!("Account {} credits {} to {}", self.bank_index, message.amount, message.recipient);
  =}

  reaction(inDebit) {=
    for port in inDebit {
        if let Some(amount) = ctx.get(port) {
            // increase the balance
            self.balance += amount;
            info!("Account {} received {}", self.bank_index, amount);
        }
    }
  =}
}

main reactor(numIterations: usize = 12, numTransactions: usize = 50000, numAccounts: usize = 1000) {
  state num_iterations = numIterations
  state num_transactions = numTransactions
  state num_accounts = numAccounts

  teller = new Teller(numAccounts=numAccounts, numBankings=numTransactions)
  runner = new BenchmarkRunner(num_iterations=numIterations)
  accounts = new[numAccounts] Account(
      numAccounts=numAccounts,
      initialBalance = {= f64::MAX / ((numAccounts * numTransactions) as f64) =})

  runner.start -> teller.start
  teller.finished -> runner.finished

  teller.credit -> accounts.inCredit
  teller.reset_state -> accounts.reset_state
  accounts.outDebit -> interleaved(accounts.inDebit)

  preamble {=
    use crate::{print_args,reactors::benchmark_runner::{print_system_info, print_benchmark_info}};
  =}

  reaction(startup) {=
    print_benchmark_info("BankingReactorLFRustBenchmark");
    let initial_balance = f64::MAX / ((self.num_accounts * self.num_transactions) as f64);
    print_args!(
        "numIterations",
        self.num_iterations,
        "numTransactions",
        self.num_transactions,
        "numAccounts",
        self.num_accounts,
        "initialBalance",
        initial_balance
    );
    print_system_info();
  =}
}
